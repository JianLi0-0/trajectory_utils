// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnc_point.proto

#ifndef PROTOBUF_INCLUDED_pnc_5fpoint_2eproto
#define PROTOBUF_INCLUDED_pnc_5fpoint_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pnc_5fpoint_2eproto 

namespace protobuf_pnc_5fpoint_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pnc_5fpoint_2eproto
namespace trajectory_utils {
class FrenetFramePoint;
class FrenetFramePointDefaultTypeInternal;
extern FrenetFramePointDefaultTypeInternal _FrenetFramePoint_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class SLPoint;
class SLPointDefaultTypeInternal;
extern SLPointDefaultTypeInternal _SLPoint_default_instance_;
class SpeedPoint;
class SpeedPointDefaultTypeInternal;
extern SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace trajectory_utils
namespace google {
namespace protobuf {
template<> ::trajectory_utils::FrenetFramePoint* Arena::CreateMaybeMessage<::trajectory_utils::FrenetFramePoint>(Arena*);
template<> ::trajectory_utils::Path* Arena::CreateMaybeMessage<::trajectory_utils::Path>(Arena*);
template<> ::trajectory_utils::PathPoint* Arena::CreateMaybeMessage<::trajectory_utils::PathPoint>(Arena*);
template<> ::trajectory_utils::Point2D* Arena::CreateMaybeMessage<::trajectory_utils::Point2D>(Arena*);
template<> ::trajectory_utils::Pose* Arena::CreateMaybeMessage<::trajectory_utils::Pose>(Arena*);
template<> ::trajectory_utils::SLPoint* Arena::CreateMaybeMessage<::trajectory_utils::SLPoint>(Arena*);
template<> ::trajectory_utils::SpeedPoint* Arena::CreateMaybeMessage<::trajectory_utils::SpeedPoint>(Arena*);
template<> ::trajectory_utils::Trajectory* Arena::CreateMaybeMessage<::trajectory_utils::Trajectory>(Arena*);
template<> ::trajectory_utils::TrajectoryPoint* Arena::CreateMaybeMessage<::trajectory_utils::TrajectoryPoint>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace trajectory_utils {

// ===================================================================

class SLPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.SLPoint) */ {
 public:
  SLPoint();
  virtual ~SLPoint();

  SLPoint(const SLPoint& from);

  inline SLPoint& operator=(const SLPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLPoint(SLPoint&& from) noexcept
    : SLPoint() {
    *this = ::std::move(from);
  }

  inline SLPoint& operator=(SLPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLPoint* internal_default_instance() {
    return reinterpret_cast<const SLPoint*>(
               &_SLPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SLPoint* other);
  friend void swap(SLPoint& a, SLPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLPoint* New() const final {
    return CreateMaybeMessage<SLPoint>(NULL);
  }

  SLPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SLPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SLPoint& from);
  void MergeFrom(const SLPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double s = 1;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // double l = 2;
  void clear_l();
  static const int kLFieldNumber = 2;
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.SLPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double s_;
  double l_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrenetFramePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.FrenetFramePoint) */ {
 public:
  FrenetFramePoint();
  virtual ~FrenetFramePoint();

  FrenetFramePoint(const FrenetFramePoint& from);

  inline FrenetFramePoint& operator=(const FrenetFramePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrenetFramePoint(FrenetFramePoint&& from) noexcept
    : FrenetFramePoint() {
    *this = ::std::move(from);
  }

  inline FrenetFramePoint& operator=(FrenetFramePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrenetFramePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrenetFramePoint* internal_default_instance() {
    return reinterpret_cast<const FrenetFramePoint*>(
               &_FrenetFramePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FrenetFramePoint* other);
  friend void swap(FrenetFramePoint& a, FrenetFramePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrenetFramePoint* New() const final {
    return CreateMaybeMessage<FrenetFramePoint>(NULL);
  }

  FrenetFramePoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrenetFramePoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrenetFramePoint& from);
  void MergeFrom(const FrenetFramePoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrenetFramePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double s = 1;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // double l = 2;
  void clear_l();
  static const int kLFieldNumber = 2;
  double l() const;
  void set_l(double value);

  // double dl = 3;
  void clear_dl();
  static const int kDlFieldNumber = 3;
  double dl() const;
  void set_dl(double value);

  // double ddl = 4;
  void clear_ddl();
  static const int kDdlFieldNumber = 4;
  double ddl() const;
  void set_ddl(double value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.FrenetFramePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double s_;
  double l_;
  double dl_;
  double ddl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.SpeedPoint) */ {
 public:
  SpeedPoint();
  virtual ~SpeedPoint();

  SpeedPoint(const SpeedPoint& from);

  inline SpeedPoint& operator=(const SpeedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPoint(SpeedPoint&& from) noexcept
    : SpeedPoint() {
    *this = ::std::move(from);
  }

  inline SpeedPoint& operator=(SpeedPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPoint* internal_default_instance() {
    return reinterpret_cast<const SpeedPoint*>(
               &_SpeedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpeedPoint* other);
  friend void swap(SpeedPoint& a, SpeedPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPoint* New() const final {
    return CreateMaybeMessage<SpeedPoint>(NULL);
  }

  SpeedPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedPoint& from);
  void MergeFrom(const SpeedPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double s = 1;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // double t = 2;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // double v = 3;
  void clear_v();
  static const int kVFieldNumber = 3;
  double v() const;
  void set_v(double value);

  // double a = 4;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // double da = 5;
  void clear_da();
  static const int kDaFieldNumber = 5;
  double da() const;
  void set_da(double value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.SpeedPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double s_;
  double t_;
  double v_;
  double a_;
  double da_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(NULL);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double heading_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.Point2D) */ {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Point2D* other);
  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(NULL);
  }

  Point2D* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.Point2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.PathPoint) */ {
 public:
  PathPoint();
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PathPoint* other);
  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const final {
    return CreateMaybeMessage<PathPoint>(NULL);
  }

  PathPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lane_id = 9;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 9;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double theta = 4;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  double theta() const;
  void set_theta(double value);

  // double kappa = 5;
  void clear_kappa();
  static const int kKappaFieldNumber = 5;
  double kappa() const;
  void set_kappa(double value);

  // double s = 6;
  void clear_s();
  static const int kSFieldNumber = 6;
  double s() const;
  void set_s(double value);

  // double dkappa = 7;
  void clear_dkappa();
  static const int kDkappaFieldNumber = 7;
  double dkappa() const;
  void set_dkappa(double value);

  // double ddkappa = 8;
  void clear_ddkappa();
  static const int kDdkappaFieldNumber = 8;
  double ddkappa() const;
  void set_ddkappa(double value);

  // double x_derivative = 10;
  void clear_x_derivative();
  static const int kXDerivativeFieldNumber = 10;
  double x_derivative() const;
  void set_x_derivative(double value);

  // double y_derivative = 11;
  void clear_y_derivative();
  static const int kYDerivativeFieldNumber = 11;
  double y_derivative() const;
  void set_y_derivative(double value);

  // double x_t = 15;
  void clear_x_t();
  static const int kXTFieldNumber = 15;
  double x_t() const;
  void set_x_t(double value);

  // double y_t = 16;
  void clear_y_t();
  static const int kYTFieldNumber = 16;
  double y_t() const;
  void set_y_t(double value);

  // double theta1 = 17;
  void clear_theta1();
  static const int kTheta1FieldNumber = 17;
  double theta1() const;
  void set_theta1(double value);

  // double kappa_t = 18;
  void clear_kappa_t();
  static const int kKappaTFieldNumber = 18;
  double kappa_t() const;
  void set_kappa_t(double value);

  // double s_t = 19;
  void clear_s_t();
  static const int kSTFieldNumber = 19;
  double s_t() const;
  void set_s_t(double value);

  // double dkappa_t = 20;
  void clear_dkappa_t();
  static const int kDkappaTFieldNumber = 20;
  double dkappa_t() const;
  void set_dkappa_t(double value);

  // double ddkappa_t = 21;
  void clear_ddkappa_t();
  static const int kDdkappaTFieldNumber = 21;
  double ddkappa_t() const;
  void set_ddkappa_t(double value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.PathPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double x_;
  double y_;
  double z_;
  double theta_;
  double kappa_;
  double s_;
  double dkappa_;
  double ddkappa_;
  double x_derivative_;
  double y_derivative_;
  double x_t_;
  double y_t_;
  double theta1_;
  double kappa_t_;
  double s_t_;
  double dkappa_t_;
  double ddkappa_t_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Path* other);
  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(NULL);
  }

  Path* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trajectory_utils.PathPoint path_point = 2;
  int path_point_size() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 2;
  ::trajectory_utils::PathPoint* mutable_path_point(int index);
  ::google::protobuf::RepeatedPtrField< ::trajectory_utils::PathPoint >*
      mutable_path_point();
  const ::trajectory_utils::PathPoint& path_point(int index) const;
  ::trajectory_utils::PathPoint* add_path_point();
  const ::google::protobuf::RepeatedPtrField< ::trajectory_utils::PathPoint >&
      path_point() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:trajectory_utils.Path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::trajectory_utils::PathPoint > path_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TrajectoryPoint* other);
  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(NULL);
  }

  TrajectoryPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .trajectory_utils.PathPoint path_point = 1;
  bool has_path_point() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 1;
  private:
  const ::trajectory_utils::PathPoint& _internal_path_point() const;
  public:
  const ::trajectory_utils::PathPoint& path_point() const;
  ::trajectory_utils::PathPoint* release_path_point();
  ::trajectory_utils::PathPoint* mutable_path_point();
  void set_allocated_path_point(::trajectory_utils::PathPoint* path_point);

  // double v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  double v() const;
  void set_v(double value);

  // double a = 3;
  void clear_a();
  static const int kAFieldNumber = 3;
  double a() const;
  void set_a(double value);

  // double relative_time = 4;
  void clear_relative_time();
  static const int kRelativeTimeFieldNumber = 4;
  double relative_time() const;
  void set_relative_time(double value);

  // double da = 5;
  void clear_da();
  static const int kDaFieldNumber = 5;
  double da() const;
  void set_da(double value);

  // double steer = 6;
  void clear_steer();
  static const int kSteerFieldNumber = 6;
  double steer() const;
  void set_steer(double value);

  // double steer_mode = 7;
  void clear_steer_mode();
  static const int kSteerModeFieldNumber = 7;
  double steer_mode() const;
  void set_steer_mode(double value);

  // bool reverse = 8;
  void clear_reverse();
  static const int kReverseFieldNumber = 8;
  bool reverse() const;
  void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:trajectory_utils.TrajectoryPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::trajectory_utils::PathPoint* path_point_;
  double v_;
  double a_;
  double relative_time_;
  double da_;
  double steer_;
  double steer_mode_;
  bool reverse_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trajectory_utils.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Trajectory* other);
  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(NULL);
  }

  Trajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trajectory_utils.TrajectoryPoint trajectory_point = 2;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 2;
  ::trajectory_utils::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::trajectory_utils::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::trajectory_utils::TrajectoryPoint& trajectory_point(int index) const;
  ::trajectory_utils::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::trajectory_utils::TrajectoryPoint >&
      trajectory_point() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:trajectory_utils.Trajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::trajectory_utils::TrajectoryPoint > trajectory_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pnc_5fpoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLPoint

// double s = 1;
inline void SLPoint::clear_s() {
  s_ = 0;
}
inline double SLPoint::s() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SLPoint.s)
  return s_;
}
inline void SLPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SLPoint.s)
}

// double l = 2;
inline void SLPoint::clear_l() {
  l_ = 0;
}
inline double SLPoint::l() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SLPoint.l)
  return l_;
}
inline void SLPoint::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SLPoint.l)
}

// -------------------------------------------------------------------

// FrenetFramePoint

// double s = 1;
inline void FrenetFramePoint::clear_s() {
  s_ = 0;
}
inline double FrenetFramePoint::s() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.FrenetFramePoint.s)
  return s_;
}
inline void FrenetFramePoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.FrenetFramePoint.s)
}

// double l = 2;
inline void FrenetFramePoint::clear_l() {
  l_ = 0;
}
inline double FrenetFramePoint::l() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.FrenetFramePoint.l)
  return l_;
}
inline void FrenetFramePoint::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.FrenetFramePoint.l)
}

// double dl = 3;
inline void FrenetFramePoint::clear_dl() {
  dl_ = 0;
}
inline double FrenetFramePoint::dl() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.FrenetFramePoint.dl)
  return dl_;
}
inline void FrenetFramePoint::set_dl(double value) {
  
  dl_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.FrenetFramePoint.dl)
}

// double ddl = 4;
inline void FrenetFramePoint::clear_ddl() {
  ddl_ = 0;
}
inline double FrenetFramePoint::ddl() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.FrenetFramePoint.ddl)
  return ddl_;
}
inline void FrenetFramePoint::set_ddl(double value) {
  
  ddl_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.FrenetFramePoint.ddl)
}

// -------------------------------------------------------------------

// SpeedPoint

// double s = 1;
inline void SpeedPoint::clear_s() {
  s_ = 0;
}
inline double SpeedPoint::s() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SpeedPoint.s)
  return s_;
}
inline void SpeedPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SpeedPoint.s)
}

// double t = 2;
inline void SpeedPoint::clear_t() {
  t_ = 0;
}
inline double SpeedPoint::t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SpeedPoint.t)
  return t_;
}
inline void SpeedPoint::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SpeedPoint.t)
}

// double v = 3;
inline void SpeedPoint::clear_v() {
  v_ = 0;
}
inline double SpeedPoint::v() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SpeedPoint.v)
  return v_;
}
inline void SpeedPoint::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SpeedPoint.v)
}

// double a = 4;
inline void SpeedPoint::clear_a() {
  a_ = 0;
}
inline double SpeedPoint::a() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SpeedPoint.a)
  return a_;
}
inline void SpeedPoint::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SpeedPoint.a)
}

// double da = 5;
inline void SpeedPoint::clear_da() {
  da_ = 0;
}
inline double SpeedPoint::da() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.SpeedPoint.da)
  return da_;
}
inline void SpeedPoint::set_da(double value) {
  
  da_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.SpeedPoint.da)
}

// -------------------------------------------------------------------

// Pose

// double x = 1;
inline void Pose::clear_x() {
  x_ = 0;
}
inline double Pose::x() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Pose.x)
  return x_;
}
inline void Pose::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.Pose.x)
}

// double y = 2;
inline void Pose::clear_y() {
  y_ = 0;
}
inline double Pose::y() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Pose.y)
  return y_;
}
inline void Pose::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.Pose.y)
}

// double heading = 3;
inline void Pose::clear_heading() {
  heading_ = 0;
}
inline double Pose::heading() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Pose.heading)
  return heading_;
}
inline void Pose::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.Pose.heading)
}

// -------------------------------------------------------------------

// Point2D

// double x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Point2D.x)
  return x_;
}
inline void Point2D::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.Point2D.x)
}

// double y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Point2D.y)
  return y_;
}
inline void Point2D::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.Point2D.y)
}

// -------------------------------------------------------------------

// PathPoint

// double x = 1;
inline void PathPoint::clear_x() {
  x_ = 0;
}
inline double PathPoint::x() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.x)
  return x_;
}
inline void PathPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.x)
}

// double y = 2;
inline void PathPoint::clear_y() {
  y_ = 0;
}
inline double PathPoint::y() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.y)
  return y_;
}
inline void PathPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.y)
}

// double z = 3;
inline void PathPoint::clear_z() {
  z_ = 0;
}
inline double PathPoint::z() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.z)
  return z_;
}
inline void PathPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.z)
}

// double theta = 4;
inline void PathPoint::clear_theta() {
  theta_ = 0;
}
inline double PathPoint::theta() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.theta)
  return theta_;
}
inline void PathPoint::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.theta)
}

// double kappa = 5;
inline void PathPoint::clear_kappa() {
  kappa_ = 0;
}
inline double PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.kappa)
  return kappa_;
}
inline void PathPoint::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.kappa)
}

// double s = 6;
inline void PathPoint::clear_s() {
  s_ = 0;
}
inline double PathPoint::s() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.s)
  return s_;
}
inline void PathPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.s)
}

// double dkappa = 7;
inline void PathPoint::clear_dkappa() {
  dkappa_ = 0;
}
inline double PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.dkappa)
  return dkappa_;
}
inline void PathPoint::set_dkappa(double value) {
  
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.dkappa)
}

// double ddkappa = 8;
inline void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
}
inline double PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.ddkappa)
  return ddkappa_;
}
inline void PathPoint::set_ddkappa(double value) {
  
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.ddkappa)
}

// string lane_id = 9;
inline void PathPoint::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathPoint::lane_id() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.lane_id)
  return lane_id_.GetNoArena();
}
inline void PathPoint::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.lane_id)
}
#if LANG_CXX11
inline void PathPoint::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trajectory_utils.PathPoint.lane_id)
}
#endif
inline void PathPoint::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trajectory_utils.PathPoint.lane_id)
}
inline void PathPoint::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trajectory_utils.PathPoint.lane_id)
}
inline ::std::string* PathPoint::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:trajectory_utils.PathPoint.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathPoint::release_lane_id() {
  // @@protoc_insertion_point(field_release:trajectory_utils.PathPoint.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathPoint::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:trajectory_utils.PathPoint.lane_id)
}

// double x_derivative = 10;
inline void PathPoint::clear_x_derivative() {
  x_derivative_ = 0;
}
inline double PathPoint::x_derivative() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.x_derivative)
  return x_derivative_;
}
inline void PathPoint::set_x_derivative(double value) {
  
  x_derivative_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.x_derivative)
}

// double y_derivative = 11;
inline void PathPoint::clear_y_derivative() {
  y_derivative_ = 0;
}
inline double PathPoint::y_derivative() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.y_derivative)
  return y_derivative_;
}
inline void PathPoint::set_y_derivative(double value) {
  
  y_derivative_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.y_derivative)
}

// double x_t = 15;
inline void PathPoint::clear_x_t() {
  x_t_ = 0;
}
inline double PathPoint::x_t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.x_t)
  return x_t_;
}
inline void PathPoint::set_x_t(double value) {
  
  x_t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.x_t)
}

// double y_t = 16;
inline void PathPoint::clear_y_t() {
  y_t_ = 0;
}
inline double PathPoint::y_t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.y_t)
  return y_t_;
}
inline void PathPoint::set_y_t(double value) {
  
  y_t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.y_t)
}

// double theta1 = 17;
inline void PathPoint::clear_theta1() {
  theta1_ = 0;
}
inline double PathPoint::theta1() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.theta1)
  return theta1_;
}
inline void PathPoint::set_theta1(double value) {
  
  theta1_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.theta1)
}

// double kappa_t = 18;
inline void PathPoint::clear_kappa_t() {
  kappa_t_ = 0;
}
inline double PathPoint::kappa_t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.kappa_t)
  return kappa_t_;
}
inline void PathPoint::set_kappa_t(double value) {
  
  kappa_t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.kappa_t)
}

// double s_t = 19;
inline void PathPoint::clear_s_t() {
  s_t_ = 0;
}
inline double PathPoint::s_t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.s_t)
  return s_t_;
}
inline void PathPoint::set_s_t(double value) {
  
  s_t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.s_t)
}

// double dkappa_t = 20;
inline void PathPoint::clear_dkappa_t() {
  dkappa_t_ = 0;
}
inline double PathPoint::dkappa_t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.dkappa_t)
  return dkappa_t_;
}
inline void PathPoint::set_dkappa_t(double value) {
  
  dkappa_t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.dkappa_t)
}

// double ddkappa_t = 21;
inline void PathPoint::clear_ddkappa_t() {
  ddkappa_t_ = 0;
}
inline double PathPoint::ddkappa_t() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.PathPoint.ddkappa_t)
  return ddkappa_t_;
}
inline void PathPoint::set_ddkappa_t(double value) {
  
  ddkappa_t_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.PathPoint.ddkappa_t)
}

// -------------------------------------------------------------------

// Path

// string name = 1;
inline void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Path.name)
  return name_.GetNoArena();
}
inline void Path::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trajectory_utils.Path.name)
}
#if LANG_CXX11
inline void Path::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trajectory_utils.Path.name)
}
#endif
inline void Path::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trajectory_utils.Path.name)
}
inline void Path::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trajectory_utils.Path.name)
}
inline ::std::string* Path::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:trajectory_utils.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:trajectory_utils.Path.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:trajectory_utils.Path.name)
}

// repeated .trajectory_utils.PathPoint path_point = 2;
inline int Path::path_point_size() const {
  return path_point_.size();
}
inline void Path::clear_path_point() {
  path_point_.Clear();
}
inline ::trajectory_utils::PathPoint* Path::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:trajectory_utils.Path.path_point)
  return path_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::trajectory_utils::PathPoint >*
Path::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:trajectory_utils.Path.path_point)
  return &path_point_;
}
inline const ::trajectory_utils::PathPoint& Path::path_point(int index) const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Path.path_point)
  return path_point_.Get(index);
}
inline ::trajectory_utils::PathPoint* Path::add_path_point() {
  // @@protoc_insertion_point(field_add:trajectory_utils.Path.path_point)
  return path_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trajectory_utils::PathPoint >&
Path::path_point() const {
  // @@protoc_insertion_point(field_list:trajectory_utils.Path.path_point)
  return path_point_;
}

// -------------------------------------------------------------------

// TrajectoryPoint

// .trajectory_utils.PathPoint path_point = 1;
inline bool TrajectoryPoint::has_path_point() const {
  return this != internal_default_instance() && path_point_ != NULL;
}
inline void TrajectoryPoint::clear_path_point() {
  if (GetArenaNoVirtual() == NULL && path_point_ != NULL) {
    delete path_point_;
  }
  path_point_ = NULL;
}
inline const ::trajectory_utils::PathPoint& TrajectoryPoint::_internal_path_point() const {
  return *path_point_;
}
inline const ::trajectory_utils::PathPoint& TrajectoryPoint::path_point() const {
  const ::trajectory_utils::PathPoint* p = path_point_;
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.path_point)
  return p != NULL ? *p : *reinterpret_cast<const ::trajectory_utils::PathPoint*>(
      &::trajectory_utils::_PathPoint_default_instance_);
}
inline ::trajectory_utils::PathPoint* TrajectoryPoint::release_path_point() {
  // @@protoc_insertion_point(field_release:trajectory_utils.TrajectoryPoint.path_point)
  
  ::trajectory_utils::PathPoint* temp = path_point_;
  path_point_ = NULL;
  return temp;
}
inline ::trajectory_utils::PathPoint* TrajectoryPoint::mutable_path_point() {
  
  if (path_point_ == NULL) {
    auto* p = CreateMaybeMessage<::trajectory_utils::PathPoint>(GetArenaNoVirtual());
    path_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:trajectory_utils.TrajectoryPoint.path_point)
  return path_point_;
}
inline void TrajectoryPoint::set_allocated_path_point(::trajectory_utils::PathPoint* path_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_point_;
  }
  if (path_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    
  } else {
    
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:trajectory_utils.TrajectoryPoint.path_point)
}

// double v = 2;
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
}
inline double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.v)
  return v_;
}
inline void TrajectoryPoint::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.v)
}

// double a = 3;
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
}
inline double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.a)
  return a_;
}
inline void TrajectoryPoint::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.a)
}

// double relative_time = 4;
inline void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
}
inline double TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.relative_time)
  return relative_time_;
}
inline void TrajectoryPoint::set_relative_time(double value) {
  
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.relative_time)
}

// double da = 5;
inline void TrajectoryPoint::clear_da() {
  da_ = 0;
}
inline double TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.da)
  return da_;
}
inline void TrajectoryPoint::set_da(double value) {
  
  da_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.da)
}

// double steer = 6;
inline void TrajectoryPoint::clear_steer() {
  steer_ = 0;
}
inline double TrajectoryPoint::steer() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.steer)
  return steer_;
}
inline void TrajectoryPoint::set_steer(double value) {
  
  steer_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.steer)
}

// double steer_mode = 7;
inline void TrajectoryPoint::clear_steer_mode() {
  steer_mode_ = 0;
}
inline double TrajectoryPoint::steer_mode() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.steer_mode)
  return steer_mode_;
}
inline void TrajectoryPoint::set_steer_mode(double value) {
  
  steer_mode_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.steer_mode)
}

// bool reverse = 8;
inline void TrajectoryPoint::clear_reverse() {
  reverse_ = false;
}
inline bool TrajectoryPoint::reverse() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.TrajectoryPoint.reverse)
  return reverse_;
}
inline void TrajectoryPoint::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:trajectory_utils.TrajectoryPoint.reverse)
}

// -------------------------------------------------------------------

// Trajectory

// string name = 1;
inline void Trajectory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trajectory::name() const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Trajectory.name)
  return name_.GetNoArena();
}
inline void Trajectory::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trajectory_utils.Trajectory.name)
}
#if LANG_CXX11
inline void Trajectory::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trajectory_utils.Trajectory.name)
}
#endif
inline void Trajectory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trajectory_utils.Trajectory.name)
}
inline void Trajectory::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trajectory_utils.Trajectory.name)
}
inline ::std::string* Trajectory::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:trajectory_utils.Trajectory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trajectory::release_name() {
  // @@protoc_insertion_point(field_release:trajectory_utils.Trajectory.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:trajectory_utils.Trajectory.name)
}

// repeated .trajectory_utils.TrajectoryPoint trajectory_point = 2;
inline int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
inline ::trajectory_utils::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:trajectory_utils.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::trajectory_utils::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:trajectory_utils.Trajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::trajectory_utils::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:trajectory_utils.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::trajectory_utils::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:trajectory_utils.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::trajectory_utils::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:trajectory_utils.Trajectory.trajectory_point)
  return trajectory_point_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trajectory_utils

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pnc_5fpoint_2eproto
